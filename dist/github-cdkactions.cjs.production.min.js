"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e,t,s,o,r,n=require("cdkactions"),i=(e=require("ts-dedent"))&&"object"==typeof e&&"default"in e?e.default:e;function a(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,(Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function u(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function p(e,t){return t||(t=e.slice(0)),e.raw=t,e}var l,c,h,g,m,d=function(e){function l(a){var l;return l=e.call(this,a,"pull-request",{name:"Pull Request",on:{pullRequest:{branches:["main"]},push:{branchesIgnore:["main"]}}})||this,new n.Job(u(l),"pull-request",{name:"CI",runsOn:"ubuntu-latest",strategy:{matrix:{gradle:["6.7.1","6.8.2"],java:["1.8","11","15"]}},steps:[{name:"Check-out Code",uses:"actions/checkout@v2",with:{"fetch-depth":"0"}},{name:"Set up JDK",uses:"actions/setup-java@v1",with:{"java-version":"${{ matrix.java }}"}},{name:"Make Gradle Wrapper Executable",run:i(t||(t=p(["chmod +x ./gradlew"])))},{name:"Set Gradle Version",run:i(s||(s=p(["./gradlew wrapper --gradle-version ${{ matrix.gradle }}"],["./gradlew wrapper --gradle-version \\${{ matrix.gradle }}"])))},{name:"Test Plugin Directly with Gradle",run:i(o||(o=p(["../gradlew check"]))),workingDirectory:"pixeloutlaw-gradle-plugin"},{name:"Test Plugin Application with Gradle",run:i(r||(r=p(["./gradlew check"])))}]}),l}return a(l,e),l}(n.Workflow),v=function(e){function t(t){var s;return s=e.call(this,t,"prepare-for-release",{name:"Prepare For Release",on:{push:{branches:["main"]}}})||this,new n.Job(u(s),"prepare-for-release",{name:"Prepare For Release",runsOn:"ubuntu-latest",steps:[{name:"Check-out Code",uses:"actions/checkout@v2",with:{"fetch-depth":"0"}},{name:"Install GitVersion",uses:"gittools/actions/gitversion/setup@v0.9.7",with:{versionSpec:"5.x"}},{name:"Determine Version",id:"gitversion",uses:"gittools/actions/gitversion/execute@v0.9.7"},{name:"Display GitVersion Outputs",run:i(l||(l=p(['\n            echo "Major: ${{ steps.gitversion.outputs.major }}"\n            echo "Minor: ${{ steps.gitversion.outputs.minor }}"\n            echo "Patch: ${{ steps.gitversion.outputs.patch }}"\n            echo "PreReleaseTag: ${{ steps.gitversion.outputs.preReleaseTag }}"\n            echo "PreReleaseTagWithDash: ${{ steps.gitversion.outputs.preReleaseTagWithDash }}"\n            echo "PreReleaseLabel: ${{ steps.gitversion.outputs.preReleaseLabel }}"\n            echo "PreReleaseNumber: ${{ steps.gitversion.outputs.preReleaseNumber }}"\n            echo "WeightedPreReleaseNumber: ${{ steps.gitversion.outputs.weightedPreReleaseNumber }}"\n            echo "BuildMetaData: ${{ steps.gitversion.outputs.buildMetaData }}"\n            echo "BuildMetaDataPadded: ${{ steps.gitversion.outputs.buildMetaDataPadded }}"\n            echo "FullBuildMetaData: ${{ steps.gitversion.outputs.fullBuildMetaData }}"\n            echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"\n            echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"\n            echo "LegacySemVer: ${{ steps.gitversion.outputs.legacySemVer }}"\n            echo "LegacySemVerPadded: ${{ steps.gitversion.outputs.legacySemVerPadded }}"\n            echo "AssemblySemVer: ${{ steps.gitversion.outputs.assemblySemVer }}"\n            echo "AssemblySemFileVer: ${{ steps.gitversion.outputs.assemblySemFileVer }}"\n            echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"\n            echo "InformationalVersion: ${{ steps.gitversion.outputs.informationalVersion }}"\n            echo "BranchName: ${{ steps.gitversion.outputs.branchName }}"\n            echo "EscapedBranchName: ${{ steps.gitversion.outputs.escapedBranchName }}"\n            echo "Sha: ${{ steps.gitversion.outputs.sha }}"\n            echo "ShortSha: ${{ steps.gitversion.outputs.shortSha }}"\n            echo "NuGetVersionV2: ${{ steps.gitversion.outputs.nuGetVersionV2 }}"\n            echo "NuGetVersion: ${{ steps.gitversion.outputs.nuGetVersion }}"\n            echo "NuGetPreReleaseTagV2: ${{ steps.gitversion.outputs.nuGetPreReleaseTagV2 }}"\n            echo "NuGetPreReleaseTag: ${{ steps.gitversion.outputs.nuGetPreReleaseTag }}"\n            echo "VersionSourceSha: ${{ steps.gitversion.outputs.versionSourceSha }}"\n            echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.commitsSinceVersionSource }}"\n            echo "CommitsSinceVersionSourcePadded: ${{ steps.gitversion.outputs.commitsSinceVersionSourcePadded }}"\n            echo "UncommittedChanges: ${{ steps.gitversion.outputs.uncommittedChanges }}"\n            echo "CommitDate: ${{ steps.gitversion.outputs.commitDate }}"\n          '],['\n            echo "Major: \\${{ steps.gitversion.outputs.major }}"\n            echo "Minor: \\${{ steps.gitversion.outputs.minor }}"\n            echo "Patch: \\${{ steps.gitversion.outputs.patch }}"\n            echo "PreReleaseTag: \\${{ steps.gitversion.outputs.preReleaseTag }}"\n            echo "PreReleaseTagWithDash: \\${{ steps.gitversion.outputs.preReleaseTagWithDash }}"\n            echo "PreReleaseLabel: \\${{ steps.gitversion.outputs.preReleaseLabel }}"\n            echo "PreReleaseNumber: \\${{ steps.gitversion.outputs.preReleaseNumber }}"\n            echo "WeightedPreReleaseNumber: \\${{ steps.gitversion.outputs.weightedPreReleaseNumber }}"\n            echo "BuildMetaData: \\${{ steps.gitversion.outputs.buildMetaData }}"\n            echo "BuildMetaDataPadded: \\${{ steps.gitversion.outputs.buildMetaDataPadded }}"\n            echo "FullBuildMetaData: \\${{ steps.gitversion.outputs.fullBuildMetaData }}"\n            echo "MajorMinorPatch: \\${{ steps.gitversion.outputs.majorMinorPatch }}"\n            echo "SemVer: \\${{ steps.gitversion.outputs.semVer }}"\n            echo "LegacySemVer: \\${{ steps.gitversion.outputs.legacySemVer }}"\n            echo "LegacySemVerPadded: \\${{ steps.gitversion.outputs.legacySemVerPadded }}"\n            echo "AssemblySemVer: \\${{ steps.gitversion.outputs.assemblySemVer }}"\n            echo "AssemblySemFileVer: \\${{ steps.gitversion.outputs.assemblySemFileVer }}"\n            echo "FullSemVer: \\${{ steps.gitversion.outputs.fullSemVer }}"\n            echo "InformationalVersion: \\${{ steps.gitversion.outputs.informationalVersion }}"\n            echo "BranchName: \\${{ steps.gitversion.outputs.branchName }}"\n            echo "EscapedBranchName: \\${{ steps.gitversion.outputs.escapedBranchName }}"\n            echo "Sha: \\${{ steps.gitversion.outputs.sha }}"\n            echo "ShortSha: \\${{ steps.gitversion.outputs.shortSha }}"\n            echo "NuGetVersionV2: \\${{ steps.gitversion.outputs.nuGetVersionV2 }}"\n            echo "NuGetVersion: \\${{ steps.gitversion.outputs.nuGetVersion }}"\n            echo "NuGetPreReleaseTagV2: \\${{ steps.gitversion.outputs.nuGetPreReleaseTagV2 }}"\n            echo "NuGetPreReleaseTag: \\${{ steps.gitversion.outputs.nuGetPreReleaseTag }}"\n            echo "VersionSourceSha: \\${{ steps.gitversion.outputs.versionSourceSha }}"\n            echo "CommitsSinceVersionSource: \\${{ steps.gitversion.outputs.commitsSinceVersionSource }}"\n            echo "CommitsSinceVersionSourcePadded: \\${{ steps.gitversion.outputs.commitsSinceVersionSourcePadded }}"\n            echo "UncommittedChanges: \\${{ steps.gitversion.outputs.uncommittedChanges }}"\n            echo "CommitDate: \\${{ steps.gitversion.outputs.commitDate }}"\n          '])))},{name:"Set up JDK",uses:"actions/setup-java@v1",with:{"java-version":"1.8"}},{name:"Set Gradle Version",run:i(c||(c=p(["./gradlew wrapper --gradle-version 6.8.2"])))},{name:"Test Plugin Directly with Gradle",run:i(h||(h=p(["../gradlew check"]))),workingDirectory:"pixeloutlaw-gradle-plugin"},{name:"Test Plugin Application with Gradle",run:i(g||(g=p(["./gradlew check"])))},{name:"Push Tag",uses:"mathieudutour/github-tag-action@v5.1",with:{custom_tag:"${{ steps.gitversion.outputs.semVer }}",github_token:"${{ secrets.ACTIONS_PAT }}",tag_prefix:"",create_annotated_tag:"true"}},{name:"Publish Plugins to Gradle Plugin Portal",run:i(m||(m=p(["./gradlew :pixeloutlaw-gradle-plugin:publishPlugins           -Pversion=${{ steps.gitversion.outputs.semVer }}           -Pgradle.publish.key=${{ secrets.GRADLE_PUBLISH_KEY }}           -Pgradle.publish.secret=${{ secrets.GRADLE_PUBLISH_SECRET }}"],["./gradlew :pixeloutlaw-gradle-plugin:publishPlugins \\\n          -Pversion=\\${{ steps.gitversion.outputs.semVer }} \\\n          -Pgradle.publish.key=\\${{ secrets.GRADLE_PUBLISH_KEY }} \\\n          -Pgradle.publish.secret=\\${{ secrets.GRADLE_PUBLISH_SECRET }}"])))}]}),s}return a(t,e),t}(n.Workflow),$=function(e){function t(t){var s;return s=e.call(this,t,"release",{name:"Create Release",on:{push:{tags:["*"]}}})||this,new n.Job(u(s),"release",{name:"Release",runsOn:"ubuntu-latest",steps:[{name:"Check-out Code",uses:"actions/checkout@v2",with:{"fetch-depth":"0"}},{name:"Build Changelog",id:"github_release",uses:"mikepenz/release-changelog-builder-action@main",env:{GITHUB_TOKEN:"${{ secrets.GITHUB_TOKEN }}"}},{name:"Create GitHub Release",uses:"actions/create-release@v1",env:{GITHUB_TOKEN:"${{ secrets.GITHUB_TOKEN }}"},with:{body:"${{ steps.github_release.outputs.changelog }}",release_name:"${{ github.ref }}",tag_name:"${{ github.ref }}"}}]}),s}return a(t,e),t}(n.Workflow);exports.GradlePluginPrepareForReleaseWorkflow=v,exports.GradlePluginPullRequestWorkflow=d,exports.GradlePluginReleaseWorkflow=$;
//# sourceMappingURL=github-cdkactions.cjs.production.min.js.map
