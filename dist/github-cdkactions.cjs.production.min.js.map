{"version":3,"file":"github-cdkactions.cjs.production.min.js","sources":["../src/GradlePluginPullRequestWorkflow.ts","../src/GradlePluginPrepareForReleaseWorkflow.ts","../src/GradlePluginReleaseWorkflow.ts"],"sourcesContent":["import { Job, Workflow } from \"cdkactions\";\nimport { Construct } from \"constructs\";\nimport dedent from \"ts-dedent\";\n\nexport class GradlePluginPullRequestWorkflow extends Workflow {\n  constructor(scope: Construct) {\n    super(scope, \"pull-request\", {\n      name: \"Pull Request\",\n      on: {\n        pullRequest: { branches: [\"main\"] },\n        push: { branchesIgnore: [\"main\"] },\n      },\n    });\n\n    new Job(this, \"pull-request\", {\n      name: \"CI\",\n      runsOn: \"ubuntu-latest\",\n      strategy: {\n        matrix: {\n          gradle: [\"6.7.1\", \"6.8.2\"],\n          java: [\"1.8\", \"11\", \"15\"],\n        },\n      },\n      steps: [\n        {\n          name: \"Check-out Code\",\n          uses: \"actions/checkout@v2\",\n          with: { \"fetch-depth\": \"0\" },\n        },\n        {\n          name: \"Set up JDK\",\n          uses: \"actions/setup-java@v1\",\n          with: { \"java-version\": `\\${{ matrix.java }}` },\n        },\n        {\n          name: \"Make Gradle Wrapper Executable\",\n          run: dedent`chmod +x ./gradlew`,\n        },\n        {\n          name: \"Set Gradle Version\",\n          run: dedent`./gradlew wrapper --gradle-version \\${{ matrix.gradle }}`,\n        },\n        {\n          name: \"Test Plugin Directly with Gradle\",\n          run: dedent`../gradlew check`,\n          workingDirectory: \"pixeloutlaw-gradle-plugin\",\n        },\n        {\n          name: \"Test Plugin Application with Gradle\",\n          run: dedent`./gradlew check`,\n        },\n      ],\n    });\n  }\n}\n","import { Job, Workflow } from \"cdkactions\";\nimport { Construct } from \"constructs\";\nimport dedent from \"ts-dedent\";\n\nexport class GradlePluginPrepareForReleaseWorkflow extends Workflow {\n  constructor(scope: Construct) {\n    super(scope, \"prepare-for-release\", {\n      name: \"Prepare For Release\",\n      on: {\n        push: { branches: [\"main\"] },\n      },\n    });\n\n    new Job(this, \"prepare-for-release\", {\n      name: \"Prepare For Release\",\n      runsOn: \"ubuntu-latest\",\n      steps: [\n        {\n          name: \"Check-out Code\",\n          uses: \"actions/checkout@v2\",\n          with: { \"fetch-depth\": \"0\" },\n        },\n        {\n          name: \"Install GitVersion\",\n          uses: \"gittools/actions/gitversion/setup@v0.9.7\",\n          with: { versionSpec: \"5.x\" },\n        },\n        {\n          name: \"Determine Version\",\n          id: \"gitversion\",\n          uses: \"gittools/actions/gitversion/execute@v0.9.7\",\n        },\n        {\n          name: \"Display GitVersion Outputs\",\n          run: dedent`\n            echo \"Major: \\${{ steps.gitversion.outputs.major }}\"\n            echo \"Minor: \\${{ steps.gitversion.outputs.minor }}\"\n            echo \"Patch: \\${{ steps.gitversion.outputs.patch }}\"\n            echo \"PreReleaseTag: \\${{ steps.gitversion.outputs.preReleaseTag }}\"\n            echo \"PreReleaseTagWithDash: \\${{ steps.gitversion.outputs.preReleaseTagWithDash }}\"\n            echo \"PreReleaseLabel: \\${{ steps.gitversion.outputs.preReleaseLabel }}\"\n            echo \"PreReleaseNumber: \\${{ steps.gitversion.outputs.preReleaseNumber }}\"\n            echo \"WeightedPreReleaseNumber: \\${{ steps.gitversion.outputs.weightedPreReleaseNumber }}\"\n            echo \"BuildMetaData: \\${{ steps.gitversion.outputs.buildMetaData }}\"\n            echo \"BuildMetaDataPadded: \\${{ steps.gitversion.outputs.buildMetaDataPadded }}\"\n            echo \"FullBuildMetaData: \\${{ steps.gitversion.outputs.fullBuildMetaData }}\"\n            echo \"MajorMinorPatch: \\${{ steps.gitversion.outputs.majorMinorPatch }}\"\n            echo \"SemVer: \\${{ steps.gitversion.outputs.semVer }}\"\n            echo \"LegacySemVer: \\${{ steps.gitversion.outputs.legacySemVer }}\"\n            echo \"LegacySemVerPadded: \\${{ steps.gitversion.outputs.legacySemVerPadded }}\"\n            echo \"AssemblySemVer: \\${{ steps.gitversion.outputs.assemblySemVer }}\"\n            echo \"AssemblySemFileVer: \\${{ steps.gitversion.outputs.assemblySemFileVer }}\"\n            echo \"FullSemVer: \\${{ steps.gitversion.outputs.fullSemVer }}\"\n            echo \"InformationalVersion: \\${{ steps.gitversion.outputs.informationalVersion }}\"\n            echo \"BranchName: \\${{ steps.gitversion.outputs.branchName }}\"\n            echo \"EscapedBranchName: \\${{ steps.gitversion.outputs.escapedBranchName }}\"\n            echo \"Sha: \\${{ steps.gitversion.outputs.sha }}\"\n            echo \"ShortSha: \\${{ steps.gitversion.outputs.shortSha }}\"\n            echo \"NuGetVersionV2: \\${{ steps.gitversion.outputs.nuGetVersionV2 }}\"\n            echo \"NuGetVersion: \\${{ steps.gitversion.outputs.nuGetVersion }}\"\n            echo \"NuGetPreReleaseTagV2: \\${{ steps.gitversion.outputs.nuGetPreReleaseTagV2 }}\"\n            echo \"NuGetPreReleaseTag: \\${{ steps.gitversion.outputs.nuGetPreReleaseTag }}\"\n            echo \"VersionSourceSha: \\${{ steps.gitversion.outputs.versionSourceSha }}\"\n            echo \"CommitsSinceVersionSource: \\${{ steps.gitversion.outputs.commitsSinceVersionSource }}\"\n            echo \"CommitsSinceVersionSourcePadded: \\${{ steps.gitversion.outputs.commitsSinceVersionSourcePadded }}\"\n            echo \"UncommittedChanges: \\${{ steps.gitversion.outputs.uncommittedChanges }}\"\n            echo \"CommitDate: \\${{ steps.gitversion.outputs.commitDate }}\"\n          `,\n        },\n        {\n          name: \"Set up JDK\",\n          uses: \"actions/setup-java@v1\",\n          with: { \"java-version\": \"1.8\" },\n        },\n        {\n          name: \"Set Gradle Version\",\n          run: dedent`./gradlew wrapper --gradle-version 6.8.2`,\n        },\n        {\n          name: \"Test Plugin Directly with Gradle\",\n          run: dedent`../gradlew check`,\n          workingDirectory: \"pixeloutlaw-gradle-plugin\",\n        },\n        {\n          name: \"Test Plugin Application with Gradle\",\n          run: dedent`./gradlew check`,\n        },\n        {\n          name: \"Push Tag\",\n          uses: \"mathieudutour/github-tag-action@v5.1\",\n          with: {\n            custom_tag: `\\${{ steps.gitversion.outputs.semVer }}`,\n            github_token: `\\${{ secrets.ACTIONS_PAT }}`,\n            tag_prefix: \"\",\n            create_annotated_tag: \"true\",\n          },\n        },\n        {\n          name: \"Publish Plugins to Gradle Plugin Portal\",\n          run: dedent`./gradlew :pixeloutlaw-gradle-plugin:publishPlugins \\\n          -Pversion=\\${{ steps.gitversion.outputs.semVer }} \\\n          -Pgradle.publish.key=\\${{ secrets.GRADLE_PUBLISH_KEY }} \\\n          -Pgradle.publish.secret=\\${{ secrets.GRADLE_PUBLISH_SECRET }}`,\n        },\n      ],\n    });\n  }\n}\n","import { Job, Workflow } from \"cdkactions\";\nimport { Construct } from \"constructs\";\n\nexport class GradlePluginReleaseWorkflow extends Workflow {\n  constructor(scope: Construct) {\n    super(scope, \"release\", {\n      name: \"Create Release\",\n      on: {\n        push: { tags: [\"*\"] },\n      },\n    });\n\n    new Job(this, \"release\", {\n      name: \"Release\",\n      runsOn: \"ubuntu-latest\",\n      steps: [\n        {\n          name: \"Check-out Code\",\n          uses: \"actions/checkout@v2\",\n          with: { \"fetch-depth\": \"0\" },\n        },\n        {\n          name: \"Build Changelog\",\n          id: \"github_release\",\n          uses: \"mikepenz/release-changelog-builder-action@main\",\n          env: {\n            GITHUB_TOKEN: `\\${{ secrets.GITHUB_TOKEN }}`,\n          },\n        },\n        {\n          name: \"Create GitHub Release\",\n          uses: \"actions/create-release@v1\",\n          env: {\n            GITHUB_TOKEN: `\\${{ secrets.GITHUB_TOKEN }}`,\n          },\n          with: {\n            body: `\\${{ steps.github_release.outputs.changelog }}`,\n            release_name: `\\${{ github.ref }}`,\n            tag_name: `\\${{ github.ref }}`,\n          },\n        },\n      ],\n    });\n  }\n}\n"],"names":["GradlePluginPullRequestWorkflow","scope","name","on","pullRequest","branches","push","branchesIgnore","Job","runsOn","strategy","matrix","gradle","java","steps","uses","run","dedent","workingDirectory","Workflow","GradlePluginPrepareForReleaseWorkflow","versionSpec","id","custom_tag","github_token","tag_prefix","create_annotated_tag","GradlePluginReleaseWorkflow","tags","env","GITHUB_TOKEN","body","release_name","tag_name"],"mappings":"qgBAIaA,yBACCC,8BACJA,EAAO,eAAgB,CAC3BC,KAAM,eACNC,GAAI,CACFC,YAAa,CAAEC,SAAU,CAAC,SAC1BC,KAAM,CAAEC,eAAgB,CAAC,sBAIzBC,WAAU,eAAgB,CAC5BN,KAAM,KACNO,OAAQ,gBACRC,SAAU,CACRC,OAAQ,CACNC,OAAQ,CAAC,QAAS,SAClBC,KAAM,CAAC,MAAO,KAAM,QAGxBC,MAAO,CACL,CACEZ,KAAM,iBACNa,KAAM,2BACA,eAAiB,MAEzB,CACEb,KAAM,aACNa,KAAM,6BACA,uCAER,CACEb,KAAM,iCACNc,IAAKC,qCAEP,CACEf,KAAM,qBACNc,IAAKC,wIAEP,CACEf,KAAM,mCACNc,IAAKC,kCACLC,iBAAkB,6BAEpB,CACEhB,KAAM,sCACNc,IAAKC,wDA7CsCE,YCAxCC,yBACCnB,8BACJA,EAAO,sBAAuB,CAClCC,KAAM,sBACNC,GAAI,CACFG,KAAM,CAAED,SAAU,CAAC,sBAInBG,WAAU,sBAAuB,CACnCN,KAAM,sBACNO,OAAQ,gBACRK,MAAO,CACL,CACEZ,KAAM,iBACNa,KAAM,2BACA,eAAiB,MAEzB,CACEb,KAAM,qBACNa,KAAM,gDACA,CAAEM,YAAa,QAEvB,CACEnB,KAAM,oBACNoB,GAAI,aACJP,KAAM,8CAER,CACEb,KAAM,6BACNc,IAAKC,g4KAmCP,CACEf,KAAM,aACNa,KAAM,6BACA,gBAAkB,QAE1B,CACEb,KAAM,qBACNc,IAAKC,2DAEP,CACEf,KAAM,mCACNc,IAAKC,kCACLC,iBAAkB,6BAEpB,CACEhB,KAAM,sCACNc,IAAKC,kCAEP,CACEf,KAAM,WACNa,KAAM,4CACA,CACJQ,oDACAC,0CACAC,WAAY,GACZC,qBAAsB,SAG1B,CACExB,KAAM,0CACNc,IAAKC,4iBA/F4CE,YCD9CQ,yBACC1B,8BACJA,EAAO,UAAW,CACtBC,KAAM,iBACNC,GAAI,CACFG,KAAM,CAAEsB,KAAM,CAAC,mBAIfpB,WAAU,UAAW,CACvBN,KAAM,UACNO,OAAQ,gBACRK,MAAO,CACL,CACEZ,KAAM,iBACNa,KAAM,2BACA,eAAiB,MAEzB,CACEb,KAAM,kBACNoB,GAAI,iBACJP,KAAM,iDACNc,IAAK,CACHC,6CAGJ,CACE5B,KAAM,wBACNa,KAAM,4BACNc,IAAK,CACHC,iDAEI,CACJC,qDACAC,iCACAC,qDAnCqCd"}